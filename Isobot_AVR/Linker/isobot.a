;/*****************************************************
;Chip type           : ATmega8L
;Program type        : Application
;Clock frequency     : 7,372000 MHz
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x60
;
;void init_atmega8(){
; 0000 000D void init_atmega8(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000E     // Input/Output Ports initialization
; 0000 000F     // Port B initialization
; 0000 0010     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0011     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0012     PORTB=0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0013     DDRB=0x00;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0014 
; 0000 0015     // Port C initialization
; 0000 0016     // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0017     // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0018     PORTC=0x00;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0019     DDRC=0x00;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 001A 
; 0000 001B     // Port D initialization
; 0000 001C     // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=In Func0=In
; 0000 001D     // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=T State0=T
; 0000 001E     PORTD=0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 001F     DDRD=0x0C;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0020 
; 0000 0021     // Timer/Counter 0 initialization
; 0000 0022     // Clock source: System Clock
; 0000 0023     // Clock value: Timer 0 Stopped
; 0000 0024     TCCR0=0x00;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0025     TCNT0=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0026 
; 0000 0027     // Timer/Counter 1 initialization
; 0000 0028     // Clock source: System Clock
; 0000 0029     // Clock value: Timer 1 Stopped
; 0000 002A     // Mode: Normal top=FFFFh
; 0000 002B     // OC1A output: Discon.
; 0000 002C     // OC1B output: Discon.
; 0000 002D     // Noise Canceler: Off
; 0000 002E     // Input Capture on Falling Edge
; 0000 002F     // Timer 1 Overflow Interrupt: Off
; 0000 0030     // Input Capture Interrupt: Off
; 0000 0031     // Compare A Match Interrupt: Off
; 0000 0032     // Compare B Match Interrupt: Off
; 0000 0033     TCCR1A=0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0034     TCCR1B=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0035     TCNT1H=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0036     TCNT1L=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0037     ICR1H=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0038     ICR1L=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0039     OCR1AH=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003A     OCR1AL=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 003B     OCR1BH=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003C     OCR1BL=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003D 
; 0000 003E     // Timer/Counter 2 initialization
; 0000 003F     // Clock source: System Clock
; 0000 0040     // Clock value: Timer 2 Stopped
; 0000 0041     // Mode: Normal top=FFh
; 0000 0042     // OC2 output: Disconnected
; 0000 0043     ASSR=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0044     TCCR2=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0045     TCNT2=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0046     OCR2=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0047 
; 0000 0048     // External Interrupt(s) initialization
; 0000 0049     // INT0: Off
; 0000 004A     // INT1: Off
; 0000 004B     MCUCR=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004C 
; 0000 004D     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 004E     TIMSK=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004F 
; 0000 0050     // USART initialization
; 0000 0051     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0052     // USART Receiver: On
; 0000 0053     // USART Transmitter: On
; 0000 0054     // USART Mode: Asynchronous
; 0000 0055     // USART Baud Rate: 19200
; 0000 0056     UCSRA=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0057     UCSRB=0x18;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0058     UCSRC=0x86;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0059     UBRRH=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 005A     UBRRL=0x17;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005B 
; 0000 005C     // Analog Comparator initialization
; 0000 005D     // Analog Comparator: Off
; 0000 005E     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 005F     ACSR=0x80;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0060     SFIOR=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0061 
; 0000 0062     // ADC initialization
; 0000 0063     // ADC Clock frequency: 921,500 kHz
; 0000 0064     // ADC Voltage Reference: AVCC pin
; 0000 0065     // Only the 8 most significant bits of
; 0000 0066     // the AD conversion result are used
; 0000 0067     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0068     ADCSRA=0x83;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0069 }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;
;unsigned char read_adc(unsigned char adc_input)
; 0000 006C {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 006D     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 006E     // Delay needed for the stabilization of the ADC input voltage
; 0000 006F     delay_us(10);
;PCODE: $00000059 VOL: 0
; 0000 0070     // Start the AD conversion
; 0000 0071     ADCSRA|=0x40;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0072     // Wait for the AD conversion to complete
; 0000 0073     while ((ADCSRA & 0x10)==0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0074     ADCSRA|=0x10;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0075     return ADCH;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0076 }
;PCODE: $0000006C VOL: 0
;
;//plati pre nastavenie Timeru 16bit na 2000khz
;//casy pre komunikaciu----
;#define start 5160      //pre start - 5160              cca 2,5 ms
;#define data0 900      //pre ukonceni data - 1160   -   0,5ms
;#define data01 900       //ak je bit 0 - 900        -   0,5ms
;#define data11 1800     //ak je bit 1 - 1820        -   1 ms
;#define rozptyl 300     //casove rozmedzie pre prijem
;//------------------------
;//nastavenie vstupu a vystupu pre isobot
;#define ISOBOT_IN PINC.0
;#define ISOBOT_OUT PORTD.3
;//------------------podporne funkcie---------------------
;//funkcia na kontrolovanie data v rozptyle
;char porovnaj(int datax,int datay, int rozptylx){
; 0000 0085 char porovnaj(int datax,int datay, int rozptylx){
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0086     if ((((datax-rozptylx) < datay) & ((datax+rozptylx) > datay)) == 1){   return 1; }
;	datax -> Y+4
;	datay -> Y+2
;	rozptylx -> Y+0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0087     else                                                               {   return 0; }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0088 }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;//-----------------------
;//*******************funkcie isobot**********************
;//funkcia pre prijem pomocou timer
;unsigned char data[4];
;void get_isobot(){
; 0000 008D void get_isobot(){
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 008E     int pocdat;
; 0000 008F     int pocdata=22;
; 0000 0090 error:
;PCODE: $0000008B VOL: 0
;	pocdat -> R16,R17
;	pocdata -> R18,R19
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0091     data[0] = 0;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0092     data[1] = 0;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0093     data[2] = 0;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0094     data[3] = 0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0095     while(ISOBOT_IN == 1);  //caka na trvalu 1 kvoli chybe nacitaniu v strede dat
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0096 //---------- start isobot ------------
; 0000 0097     TCNT1 = 0;              //nuluje timer
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0098     while (ISOBOT_IN == 0); //caka na start
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0099     if (porovnaj(start,TCNT1,rozptyl) == 0)    goto error;    //ak sa cas nezhoduje zo start vracia na error
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 009A //------------------------------------
; 0000 009B     for(pocdat = 0;pocdat < pocdata;pocdat++){
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 009C     //--------------start prijem data jednotlive---------------------
; 0000 009D         if ((data[0] & 0x08)== 0x08)    pocdata = 22;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 009E         else                            pocdata = 30;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 009F         TCNT1 = 0;                      //nuluje timer
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00A0         while (ISOBOT_IN == 1);         //caka na data
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00A1             if (TCNT1 > 1300){
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00A2                 if (pocdat < 6){
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00A3                    data[0] = data[0] | 0x01;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00A4                 }
; 0000 00A5                 else if(pocdat < 14){
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00A6                    data[1] = data[1] | 0x01;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00A7                 }
; 0000 00A8                 else if(pocdat < 22){
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00A9                    data[2] = data[2] | 0x01;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00AA                 }
; 0000 00AB                 else{
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00AC                    data[3] = data[3] | 0x01;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00AD                 }
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00AE             }
; 0000 00AF             if ((pocdat < 6)&(pocdat!=5)){
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00B0                 data[0]=data[0]<<1;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00B1             }
; 0000 00B2             else if((pocdat < 14)&(pocdat!=13)){
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00B3                 data[1]=data[1]<<1;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00B4             }
; 0000 00B5             else if((pocdat < 22)&(pocdat!=21)){
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00B6                 data[2]=data[2]<<1;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00B7             }
; 0000 00B8             else if((pocdat < 30)&(pocdat!=29)){
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00B9                 data[3]=data[3]<<1;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00BA             }
; 0000 00BB     //----------------------------------------------------------------
; 0000 00BC         TCNT1 = 0;                      //nuluje timer
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00BD         while (ISOBOT_IN == 0);        //caka na ukoncenie data
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00BE      if (porovnaj(data0,TCNT1,rozptyl) == 0) goto error; //ak sa cas zhoduje pokracuje
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00BF     //----------------------------------------------------------------
; 0000 00C0     }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00C1 }
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;//------------------------------------------------
;//funkcia odosielania do isobota pomocou delay
;void send_isobot(unsigned char data[]){
; 0000 00C4 void send_isobot(unsigned char data[]){
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00C5     int pocdat;
; 0000 00C6     int pocdata=22;
; 0000 00C7     if((data[0]&0x08)==0x08) pocdata = 22;
;PCODE: $00000160 VOL: 0
;	data -> Y+4
;	pocdat -> R16,R17
;	pocdata -> R18,R19
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00C8     else                     pocdata = 30;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00C9 //---------- start isobot ------------
; 0000 00CA     ISOBOT_OUT = 0;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00CB     delay_ms(2);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00CC     delay_us(500);
;PCODE: $00000175 VOL: 0
; 0000 00CD //------------------------------------
; 0000 00CE     for(pocdat = 0;pocdat < pocdata;pocdat++){
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00CF     //--------------start prijem data jednotlive---------------------
; 0000 00D0         ISOBOT_OUT = 1;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00D1             if (pocdat < 6){
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00D2                if((data[0]&0x20)==0x20){
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00D3                     delay_ms(1);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00D4                     delay_us(50);
;PCODE: $0000018D VOL: 0
; 0000 00D5                }
; 0000 00D6                else{
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00D7                     delay_us(550);
;PCODE: $00000190 VOL: 0
; 0000 00D8                }
;PCODE: $00000191 VOL: 0
; 0000 00D9             }
; 0000 00DA             else if(pocdat < 14){
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00DB                if((data[1]&0x80)==0x80){
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00DC                     delay_ms(1);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00DD                     delay_us(50);
;PCODE: $000001A1 VOL: 0
; 0000 00DE                }
; 0000 00DF                else{
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00E0                     delay_us(550);
;PCODE: $000001A4 VOL: 0
; 0000 00E1                }
;PCODE: $000001A5 VOL: 0
; 0000 00E2             }
; 0000 00E3             else if(pocdat < 22){
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00E4                if((data[2]&0x80)==0x80){
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00E5                     delay_ms(1);
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00E6                     delay_us(50);
;PCODE: $000001B5 VOL: 0
; 0000 00E7                }
; 0000 00E8                else{
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00E9                     delay_us(550);
;PCODE: $000001B8 VOL: 0
; 0000 00EA                }
;PCODE: $000001B9 VOL: 0
; 0000 00EB             }
; 0000 00EC             else{
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00ED                if((data[3]&0x80)==0x80){
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00EE                     delay_ms(1);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 00EF                     delay_us(50);
;PCODE: $000001C6 VOL: 0
; 0000 00F0                }
; 0000 00F1                else{
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00F2                     delay_us(550);
;PCODE: $000001C9 VOL: 0
; 0000 00F3                }
;PCODE: $000001CA VOL: 0
; 0000 00F4             }
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 00F5         //--------------------------------
; 0000 00F6             if ((pocdat < 6)){
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 00F7                 data[0]=data[0]<<1;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00F8             }
; 0000 00F9             else if((pocdat < 14)){
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 00FA                 data[1]=data[1]<<1;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00FB             }
; 0000 00FC             else if((pocdat < 22)){
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00FD                 data[2]=data[2]<<1;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00FE             }
; 0000 00FF             else if((pocdat < 30)){
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0100                 data[3]=data[3]<<1;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0101             }
; 0000 0102     //----------------------------------------------------------------
; 0000 0103         ISOBOT_OUT = 0;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0104         delay_us(550);
;PCODE: $00000201 VOL: 0
; 0000 0105     //----------------------------------------------------------------
; 0000 0106     }
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0107     ISOBOT_OUT = 1;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0108     delay_ms(100);
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0109 }
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;unsigned char datax[4];
;void main(void)
; 0000 010C {
;PCODE: $00000210 VOL: 0
; 0000 010D     init_atmega8();
;PCODE: $00000211 VOL: 0
; 0000 010E     PORTD.2 =1;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 010F     delay_ms(500);
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0110     PORTD.2 =0;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0111     while(getchar() != 'A');
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0112     putchar(5);
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0113     while (1){
;PCODE: $00000222 VOL: 0
; 0000 0114         switch(getchar()){
;PCODE: $00000223 VOL: 0
; 0000 0115             case 0: datax[0]=getchar();
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0116                     datax[1]=getchar();
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 0117                     datax[2]=getchar();
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0118                     datax[3]=getchar();
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0119                     send_isobot(datax);
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 011A                     break;
;PCODE: $00000234 VOL: 0
; 0000 011B             case 1: DDRC = getchar();       break;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 011C             case 2: DDRB = getchar();       break;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 011D             case 3: PORTB = getchar();      break;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 011E             case 4: putchar(PINB);          break;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 011F             case 5: putchar(read_adc(0));   break;
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0120             case 6: putchar(read_adc(1));   break;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0121             case 7: putchar(read_adc(2));   break;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0122             case 8: putchar(read_adc(3));   break;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 0123             case 9: putchar(read_adc(4));   break;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0124             case 10: putchar(read_adc(5));  break;
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0125             case 11: putchar(PINC);       break;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 0126             case 12: PORTC = getchar();     break;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 0127             case 'A':   putchar(5);         break;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 0128         }
;PCODE: $00000298 VOL: 0
; 0000 0129     };
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 012A }
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
